/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const app = express();
const { v4: uuidv4 } = require("uuid");
const fs = require("fs").promises;

const todoServer = "todos.json";

const port = process.env.PORT || 4000;
app.use(bodyParser.json());

async function readFromServer() {
  try {
    const data = await fs.readFile(todoServer, "utf8");
    return JSON.parse(data);
  } catch (err) {
    console.error(err);
    return []; // Return an empty array in case of an error or if the file doesn't exist yet.
  }
}

async function writeToServer(data) {
  await fs.writeFile(todoServer, JSON.stringify(data), "utf8");
}

app.get("/todos", async (req, res) => {
  try {
    const todos = await readFromServer();
    res.json(todos);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Internal Server Error" });
  }
});

app.get("/todos/:id", async (req, res) => {
  readFromServer()
    .then((response) => {
      // console.log(response)
      response.map((todo) => {
        console.log(todo);
        if (todo.id === req.params.id) {
          res.json(todo);
        }
      });
    })
    .catch((err) => res.status(500).json({ error: "Something went wrong" }));
});

app.post("/todos", async (req, res) => {
  const { title, description } = req.body;
  const id = uuidv4();
  const todo = {
    id,
    title,
    description,
  };
  try {
    const storeTodos = await readFromServer();
    storeTodos.push(todo);
    await writeToServer(storeTodos);
    res.status(200).json({ to });
  } catch (err) {
    console.log(err);
  }
});

app.put("/todos/:id", async (req, res) => {
  const { title, description } = req.body;
  const id = req.params.id;
  const updatedtodo = { id, title, description };
  readFromServer()
    .then((response) => {
      const indexToUpdate = response.findIndex((todo) => todo.id === id);
      console.log(indexToUpdate);
      if (indexToUpdate !== -1) {
        response[indexToUpdate] = {
          ...response[indexToUpdate],
          ...updatedtodo,
        };
      }
      writeToServer(response);
      res.status(200).json({ success: true, todo: updatedtodo });
    })
    .catch((err) => res.status(500).json({ error: "Something went wrong" }));
});

app.delete("/todos/:id", async (req, res) => {
  const id = req.params.id;

  try {
    const todos = await readFromServer();

    const deleteIndex = todos.findIndex((todo) => todo.id === id);

    if (deleteIndex !== -1) {
      var newtodo = todos.filter((todo) => todo.id !== id);
    }
    await writeToServer(newtodo);
    res.status(200).json({success: true,json: newtodo})
  } catch (err) {
    res.status(500).json({error: "Something went wrong"});
  }
});

app.listen(port, () => {
  console.log("listening on port " + port);
});

module.exports = app;
